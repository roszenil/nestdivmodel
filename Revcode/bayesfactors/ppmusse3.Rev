####################################################################################################
#
# MuSSE for Three State Nest Evolution Models
#
# authors: Rosana Zenil-Ferguson
# Last updated: 03/31/2020
####################################################################################################

setOption("useScaling", "true")
#IMPORTANT: Change base directory depending on location of the run mine here is /home/eeg/shared/twostatesse/nest/ (Both input and output files require it)

NUM_STATES=3
#########################
# Read in the data
#########################
observed_phylogeny <- readTrees("/blue/burleigh/rzenil/nido/nesttree.nex")[1]
data <- readCharacterDataDelimited("/blue/burleigh/rzenil/nido/nestthreestate.tsv",stateLabels=3,type="NaturalNumbers",delimiter="\t",headers=FALSE)
# Get some useful variables from the data. We need these later on
taxa <- observed_phylogeny.taxa()

# set my move index
mvi = 0
mni = 0

H = 0.587405

####################
# Create the rates #
####################

### Specify a prior on the diversification and turnover rate

### Create the constant prior parameters of the diversification rates
## Number of surviving lineages is 3225
rate_mean <- ln( ln(3225/2.0) / observed_phylogeny.rootAge() )
rate_sd <- 2*H

for (i in 1:NUM_STATES) {

### Create a lognormal distributed variable for the diversification rate
log_speciation[i] ~ dnNormal(mean=rate_mean,sd=rate_sd)
log_speciation[i].setValue( rate_mean )
speciation[i] := exp( log_speciation[i] )
moves[++mvi] = mvSlide(log_speciation[i],delta=0.20,tune=true,weight=3.0)

### Create a lognormal distributed variable for the turnover rate
log_extinction[i] ~ dnNormal(mean=rate_mean,sd=rate_sd)
log_extinction[i].setValue( rate_mean )
extinction[i] := exp( log_extinction[i] )
moves[++mvi] = mvSlide(log_extinction[i],delta=0.20,tune=true,weight=3)
}


#########################################################
# Set up the transition rate matrix for observed states #
#########################################################
## I defined very loosely my gamma priors for rate  of polyploidy in the Q-mat
shape_pr := 0.5
rate_pr := 1
############### Alternative definition or rate parameter
# Each transition rate between observed states are drawn
# from an exponential distribution with a mean of 10
# character state transitions over the tree.
# rate_pr := observed_phylogeny.treeLength() / 10

### Rate parameters in the Q matrix that aren't zero
q_12 ~ dnGamma(shape=shape_pr, rate=rate_pr) ### Dome to Cup
q_21 ~ dnGamma(shape=shape_pr, rate=rate_pr) ### Cup to Dome
q_23 ~ dnGamma(shape=shape_pr, rate=rate_pr) ### Cup to Cavity
q_32 ~ dnGamma(shape=shape_pr, rate=rate_pr) ### Cavity to Cup
q_13 ~ dnGamma(shape=shape_pr, rate=rate_pr) ### Dome to Cavity
q_31 ~ dnGamma(shape=shape_pr, rate=rate_pr) ### Cavity to Dome

moves[++mvi] = mvScale( q_12, weight=2 )
moves[++mvi] = mvScale( q_21, weight=2 )
moves[++mvi] = mvScale( q_23, weight=2 )
moves[++mvi] = mvScale( q_32, weight=2 )
moves[++mvi] = mvScale( q_13, weight=2 )
moves[++mvi] = mvScale( q_31, weight=2 )

# first initialize the matrix with all zeros:
for (i in 1:3) {
for (j in 1:3) {
q[i][j] := 0.0
}
}
q[1][2] := q_12
q[2][1] := q_21
q[2][3] := q_23
q[3][2] := q_32
q[1][3] := q_13
q[3][1] := q_31

# generate the actual matrix
rate_matrix := fnFreeK(q, rescaled=false, matrixExponentialMethod="scalingAndSquaring")

### Create a constant variable with the prior probabilities of each rate category at the root.
rate_category_prior ~ dnDirichlet( rep(1,NUM_STATES) )
moves[++mvi] = mvDirichletSimplex(rate_category_prior,tune=true,weight=2)

### Create the fix parameter for the age of the root set to the observed age
root <- observed_phylogeny.rootAge()

### rho is the probability of sampling species at the present
### I did not add any sampling of species but it is posible by setting this rho parameter
### 6321 possible passerines
rho <- observed_phylogeny.ntips()/6321

#### construct a variable for the tree drawn from a birth death process
timetree ~ dnCDBDP( rootAge = root,
speciationRates   = speciation,
extinctionRates   = extinction,
Q                 = rate_matrix,
pi                = rate_category_prior,
rho               = rho,
delta             = 1.0,
condition         = "time")

### clamp the model with the "observed" tree
timetree.clamp( observed_phylogeny )
timetree.clampCharData( data )



#############
# The Model #
#############


### workspace model wrapper ###
mymodel = model(rate_matrix)

### set up the monitors that will output parameter values to file and screen

monitors[++mni] = mnModel(filename="/blue/burleigh/rzenil/nido/output/MuSSE_threestate_pp.log", printgen=1)
monitors[++mni] = mnScreen(printgen=10, q_31, speciation, extinction)



################
# The Analysis #
################

power_pbisse = powerPosterior(mymodel, moves, monitors,"/blue/burleigh/rzenil/nido/output/ppmusse3state.out",cats=20)

### pre-burnin to tune the proposals
power_pbisse.burnin(generations=1000,tuningInterval=50)

### run the MCMC
power_pbisse.run(generations=1000)

q()
