####################################################################################################
#
# MuSSE for Six State Nest Evolution Models
#
# authors: Rosana Zenil-Ferguson
# Last updated: 04/26/2020
####################################################################################################

setOption("useScaling", "true")

#IMPORTANT: Change base directory depending on location of the run
#mine here is   make sure to change (Both input and output files require it)

NUM_STATES=6
#########################
# Read in the data
#########################
observed_phylogeny <- readTrees("/ufrc/burleigh/rzenil/nido/nesttree.nex")[1]

data <- readCharacterDataDelimited("/ufrc/burleigh/rzenil/nido/nestsixstate.tsv",stateLabels=6,type="NaturalNumbers",delimiter="\t",headers=FALSE)
# Get some useful variables from the data. We need these later on
data

taxa <- observed_phylogeny.taxa()

# set my move index
mvi = 0
mni = 0

H = 0.587405
H
####################
# Create the rates #
####################

### Specify a prior on the diversification and turnover rate
### 0= Dome 1=Cup 2=caVity and 3=DC 4=CV 5=DV
### Create the constant prior parameters of the diversification rates
## Number of surviving lineages is 3225

rate_mean <- ln( ln(3225/2.0) / observed_phylogeny.rootAge() )
rate_sd <- 2*H

for (i in 1:3) {

### Create a lognormal distributed variable for the diversification rate
log_speciation[i] ~ dnNormal(mean=rate_mean,sd=rate_sd)
log_speciation[i].setValue( rate_mean )
speciation[i] := exp( log_speciation[i] )
moves[++mvi] = mvSlide(log_speciation[i],delta=0.20,tune=true,weight=1.0)

### Create a lognormal distributed variable for the turnover rate
log_extinction[i] ~ dnNormal(mean=rate_mean,sd=rate_sd)
log_extinction[i].setValue( rate_mean )
extinction[i] := exp( log_extinction[i] )
moves[++mvi] = mvSlide(log_extinction[i],delta=0.20,tune=true,weight=1)

}
for (i in 4:6){
speciation[i] := 0
extinction[i] := 0
}

speciation
extinction

#########################################################
# Set up the transition rate matrix for observed states #
#########################################################
## I defined very loosely my gamma priors for rate  of polyploidy in the Q-mat
shape_pr := 0.5
rate_pr := 1
############### Alternative definition or rate parameter
# Each transition rate between observed states are drawn
# from an exponential distribution with a mean of 10
# character state transitions over the tree.
# rate_pr := observed_phylogeny.treeLength() / 10

### Rate parameters in the Q matrix that aren't zero
q_12 ~ dnGamma(shape=shape_pr, rate=rate_pr) ### Dome to Cup
q_21 ~ dnGamma(shape=shape_pr, rate=rate_pr) ### Cup to Dome
q_23 ~ dnGamma(shape=shape_pr, rate=rate_pr) ### Cup to Cavity
q_32 ~ dnGamma(shape=shape_pr, rate=rate_pr) ### Cavity to Cup
q_13 ~ dnGamma(shape=shape_pr, rate=rate_pr) ### Dome to Cavity
q_31 ~ dnGamma(shape=shape_pr, rate=rate_pr) ### Cavity to Dome
q_14 ~ dnGamma(shape=shape_pr, rate=rate_pr) ### Dome to Dome and Cup
q_41 ~ dnGamma(shape=shape_pr, rate=rate_pr) ### Dome and Cup to Dome only
q_25 ~ dnGamma(shape=shape_pr, rate=rate_pr) ### Cup to Cup and Cavity
q_52 ~ dnGamma(shape=shape_pr, rate=rate_pr) ### Cup and Cavity to Cup only
q_36 ~ dnGamma(shape=shape_pr, rate=rate_pr) ### Cavity to Dome and Cavity
q_63 ~ dnGamma(shape=shape_pr, rate=rate_pr) ### Dome and Cavity to Cavity only
q_16 ~ dnGamma(shape=shape_pr, rate=rate_pr) ### Dome to Dome and Cavity 
q_61 ~ dnGamma(shape=shape_pr, rate=rate_pr) ### Dome and Cavity to Dome only
q_24 ~ dnGamma(shape=shape_pr, rate=rate_pr) ### Cup to Dome and Cup
q_42 ~ dnGamma(shape=shape_pr, rate=rate_pr) ### Dome and Cup  to Cup only
q_35 ~ dnGamma(shape=shape_pr, rate=rate_pr) ### Cavity to Cup and Cavity
q_53 ~ dnGamma(shape=shape_pr, rate=rate_pr) ### Cup and Cavity to Cavity only


moves[++mvi] = mvScale( q_12, weight=2 )
moves[++mvi] = mvScale( q_21, weight=2 )
moves[++mvi] = mvScale( q_23, weight=2 )
moves[++mvi] = mvScale( q_32, weight=2 )
moves[++mvi] = mvScale( q_13, weight=2 )
moves[++mvi] = mvScale( q_31, weight=2 )
moves[++mvi] = mvScale( q_14, weight=2 )
moves[++mvi] = mvScale( q_41, weight=2 )
moves[++mvi] = mvScale( q_25, weight=2 )
moves[++mvi] = mvScale( q_52, weight=2 )
moves[++mvi] = mvScale( q_36, weight=2 )
moves[++mvi] = mvScale( q_63, weight=2 )
moves[++mvi] = mvScale( q_16, weight=2 )
moves[++mvi] = mvScale( q_61, weight=2 )
moves[++mvi] = mvScale( q_24, weight=2 )
moves[++mvi] = mvScale( q_42, weight=2 )
moves[++mvi] = mvScale( q_35, weight=2 )
moves[++mvi] = mvScale( q_53, weight=2 )


# first initialize the matrix with all zeros:
for (i in 1:6) {
for (j in 1:6) {
q[i][j] := 0.0
}
}
q[1][2] := q_12
q[2][1] := q_21
q[2][3] := q_23
q[3][2] := q_32
q[1][3] := q_13
q[3][1] := q_31
q[1][4] := q_14
q[4][1] := q_41
q[2][5] := q_25
q[5][2] := q_52
q[3][6] := q_36
q[6][3] := q_63
q[1][6] := q_16
q[6][1] := q_61
q[2][4] := q_24
q[4][2] := q_42
q[3][5] := q_35
q[5][3] := q_53

# generate the actual matrix
rate_matrix := fnFreeK(q, rescaled=false, matrixExponentialMethod="scalingAndSquaring")
rate_matrix

### Create a constant variable with the prior probabilities of each rate category at the root.
rate_category_prior ~ dnDirichlet( rep(1,NUM_STATES) )
moves[++mvi] = mvDirichletSimplex(rate_category_prior,tune=true,weight=2)

rate_category_prior

### Create the fix parameter for the age of the root set to the observed age
root <- observed_phylogeny.rootAge()

root

### rho is the probability of sampling species at the present
### I did not add any sampling of species but it is posible by setting this rho parameter
### 6321 possible passerines
rho <- observed_phylogeny.ntips()/6321
rho

#### construct a variable for the tree drawn from a birth death process
timetree ~ dnCDBDP( rootAge = root,
speciationRates   = speciation,
extinctionRates   = extinction,
Q                 = rate_matrix,
pi                = rate_category_prior,
rho               = rho,
delta             = 1.0,
condition         = "time")

### clamp the model with the "observed" tree
timetree.clamp( observed_phylogeny )
timetree.clampCharData( data )

#############
# The Model #
#############

### workspace model wrapper ###
mymodel = model(rate_matrix)
mymodel

### set up the monitors that will output parameter values to file and screen
monitors[++mni] = mnModel(filename="/ufrc/burleigh/rzenil/nido/output/MuSSE_sixstate.log", printgen=1)
#monitors[++mni] = mnModel(filename="output/MuSSE_sixstate.log", printgen=1)
#monitors[++mni] = mnStochasticCharacterMap(cdbdp=timetree, filename="/home/eeg/shared/twostatesse/nest/output/MuSSE_sixstatemaps.log", printgen=1000)
#monitors[++mni] = mnJointConditionalAncestralState(tree=timetree, cdbdp=timetree, type="NaturalNumbers", printgen=100, withTips=true, withStartStates=false, filename="/mnt/scratch/nfs_fs02/roszenil/nido/output/anc_states_MuSSE_sixstate.log")
monitors[++mni] = mnScreen(printgen=10, rate_matrix, speciation, extinction)

################
# The Analysis #
################

### workspace mcmc
mymcmc = mcmc(mymodel, monitors, moves, nruns=1, moveschedule="random")

### pre-burnin to tune the proposals
#mymcmc.burnin(generations=5000,tuningInterval=100)

### run the MCMC
mymcmc.run(generations=30000)
timetree.clamp(observed_phylogeny)
##############################
# Summarize ancestral states #
##############################
## We will run this later locally

#anc_states = readAncestralStateTrace("/home/eeg/shared/twostatesse/nest/output/anc_states_MuSSE_sixstate.log")
#anc_tree = ancestralStateTree(tree=observed_phylogeny, ancestral_state_trace_vector=anc_states, include_start_states=false, file="/home/eeg/shared/twostatesse/nest/output/anc_states_summaryMuSSEsixstate.tree", burnin=5000, summary_statistic="MAP", site=0)

q()
